import tkinter as tk
import random

class SnakeGame:
    def __init__(self, root):
        self.root = root
        self.root.title("Snake Game")

        # Set up the canvas
        self.canvas = tk.Canvas(root, width=600, height=400, bg='black')
        self.canvas.pack()

        # Initialize the game state
        self.snake = [(100, 100), (90, 100), (80, 100)]
        self.food = self.create_food()
        self.direction = 'Right'
        self.running = True
        self.score = 0

        # Bind key events
        root.bind("<KeyPress>", self.change_direction)

        # Start the game loop
        self.update_game()

    def create_food(self):
        x = random.randint(0, 59) * 10
        y = random.randint(0, 39) * 10
        return (x, y)

    def change_direction(self, event):
        new_direction = event.keysym
        if new_direction == 'Left' and self.direction != 'Right':
            self.direction = 'Left'
        elif new_direction == 'Right' and self.direction != 'Left':
            self.direction = 'Right'
        elif new_direction == 'Up' and self.direction != 'Down':
            self.direction = 'Up'
        elif new_direction == 'Down' and self.direction != 'Up':
            self.direction = 'Down'

    def update_game(self):
        if not self.running:
            return

        self.move_snake()
        self.check_collisions()
        self.render()

        # Schedule the next update
        self.root.after(100, self.update_game)

    def move_snake(self):
        head_x, head_y = self.snake[0]
        if self.direction == 'Left':
            new_head = (head_x - 10, head_y)
        elif self.direction == 'Right':
            new_head = (head_x + 10, head_y)
        elif self.direction == 'Up':
            new_head = (head_x, head_y - 10)
        elif self.direction == 'Down':
            new_head = (head_x, head_y + 10)

        # Add the new head and remove the tail
        self.snake = [new_head] + self.snake[:-1]

        # Check if the snake has eaten the food
        if self.snake[0] == self.food:
            self.snake.append(self.snake[-1])  # Grow the snake
            self.food = self.create_food()
            self.score += 10

    def check_collisions(self):
        head_x, head_y = self.snake[0]
        # Check collision with the wall
        if head_x < 0 or head_x >= 600 or head_y < 0 or head_y >= 400:
            self.running = False

        # Check collision with itself
        if self.snake[0] in self.snake[1:]:
            self.running = False

    def render(self):
        self.canvas.delete("all")
        # Draw the snake
        for segment in self.snake:
            self.canvas.create_rectangle(segment[0], segment[1], segment[0] + 10, segment[1] + 10, fill='green')
        # Draw the food
        self.canvas.create_rectangle(self.food[0], self.food[1], self.food[0] + 10, self.food[1] + 10, fill='red')

        # Draw the score
        self.canvas.create_text(300, 20, text=f"Score: {self.score}", fill='white', font=('Arial', 16))

if __name__ == "__main__":
    root = tk.Tk()
    game = SnakeGame(root)
    root.mainloop()
